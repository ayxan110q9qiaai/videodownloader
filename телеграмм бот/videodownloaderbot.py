import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import io
from datetime import datetime
import yt_dlp

API_TOKEN = "8445916348:AAEnSc8jcu8or3vlBFlSa5fmt2jKbxhu_m8"
ADMIN_ID = 1086839553

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users_data = {}
FREE_LIMIT = 3

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def lang_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    kb.add(KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton("üá¨üáß English"), KeyboardButton("üá¶üáø Az…ôrbaycanca"))
    return kb

def pro_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    kb.add(KeyboardButton("üíé 1 –º–µ—Å—è—Ü ‚Äî $3.99"))
    kb.add(KeyboardButton("üíé 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî $19.99"))
    kb.add(KeyboardButton("üíé 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî $43.99"))
    return kb

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / Dil se√ßin:", reply_markup=lang_keyboard())

@dp.message_handler(lambda message: message.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English", "üá¶üáø Az…ôrbaycanca"])
async def set_language(message: types.Message):
    users_data[message.from_user.id] = {
        "language": message.text,
        "pro": False,
        "plan": None,
        "downloads_today": 0,
        "last_download": None,
        "waiting_for_check": False
    }
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ PRO-–ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=pro_keyboard())

@dp.message_handler(lambda message: message.text in ["üíé 1 –º–µ—Å—è—Ü ‚Äî $3.99", "üíé 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî $19.99", "üíé 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî $43.99"])
async def set_pro(message: types.Message):
    user = users_data[message.from_user.id]
    user["plan"] = message.text
    user["waiting_for_check"] = True
    await message.reply(
        f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É: <b><u>4169 7388 1194 7708</u></b>\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–µ–∫ (—Å–∫—Ä–∏–Ω/—Ñ–∞–π–ª) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        parse_mode="HTML"
    )

# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ --------------------
@dp.message_handler(content_types=["photo", "document"])
async def receive_check(message: types.Message):
    user = users_data.get(message.from_user.id)
    if user and user.get("waiting_for_check"):
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{message.from_user.id}"))
        kb.add(InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{message.from_user.id}"))

        text = f"üì• –ü–æ—Å—Ç—É–ø–∏–ª —á–µ–∫ –æ—Ç {message.from_user.first_name} ({message.from_user.id})\n–¢–∞—Ä–∏—Ñ: {user['plan']}"
        if message.photo:
            await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=text, reply_markup=kb)
        elif message.document:
            await bot.send_document(ADMIN_ID, message.document.file_id, caption=text, reply_markup=kb)

        await message.reply("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ PRO-–¥–æ—Å—Ç—É–ø.")
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ PRO-–ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ.")

# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞ --------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith(("confirm_", "reject_")))
async def process_check_callback(callback_query: types.CallbackQuery):
    action, user_id_str = callback_query.data.split("_")
    user_id = int(user_id_str)
    user = users_data.get(user_id)
    if not user:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if action == "confirm":
        user["pro"] = True
        user["waiting_for_check"] = False
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! PRO-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        await callback_query.message.edit_caption(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n–¢–∞—Ä–∏—Ñ: {user['plan']}")
    elif action == "reject":
        user["pro"] = False
        user["waiting_for_check"] = False
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await callback_query.message.edit_caption(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n–¢–∞—Ä–∏—Ñ: {user['plan']}")

    await callback_query.answer()

# -------------------- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ TikTok —á–µ—Ä–µ–∑ yt-dlp --------------------
def download_tiktok_video(url):
    buffer = io.BytesIO()
    ydl_opts = {
        'format': 'mp4',
        'quiet': True,
        'outtmpl': 'video.mp4',
        'noplaylist': True,
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        with open("video.mp4", "rb") as f:
            buffer.write(f.read())
        buffer.seek(0)
        return buffer.read(), None
    except Exception as e:
        return None, str(e)

@dp.message_handler(lambda message: "tiktok.com" in message.text)
async def handle_tiktok(message: types.Message):
    user = users_data.get(message.from_user.id)
    if not user:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ —Ç–∞—Ä–∏—Ñ PRO.")
        return

    now = datetime.now()
    last_download = user.get("last_download")
    if last_download and last_download.date() < now.date():
        user["downloads_today"] = 0

    if not user["pro"] and user.get("downloads_today", 0) >= FREE_LIMIT:
        await message.reply("üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π (3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
        return

    await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞...")
    url = message.text
    video, error = download_tiktok_video(url)
    if video:
        await message.answer_document(InputFile(io.BytesIO(video), filename="tiktok_video.mp4"))
        user["downloads_today"] += 1
        user["last_download"] = now
    else:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {error}")

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
